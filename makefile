# Makefile for OneSamp project
# Created April 10th, 2014
#
# General abbreviations:
# S is a system program
# L is library flag
# F is flag (non-library)
# P is absolute path
# R is relative path
# E is an executable
# H is header
# C is a C file
# X is a C++ file
# O is object

#####################
#####################
## SYSTEM PROGRAMS ##
#####################
#####################

# C compiler
C_S=gcc

# C++ compiler
CC_S=g++

# Delete operation
DELETE_S=rm -fr

#######################
#######################
## NON-LIBRARY FLAGS ##
#######################
#######################

# C compiler flags
C_F=-I/home/mark/repository/ONeSAMP2/ -g -static

# C++ compiler flags
CC_F=

# Flag to specify an output path in C or C++
OUTPUT_P_F=-fopenmp -o

# Flag to output an object in C or C++
OUTPUT_O_F=-fopenmp -c

# If it is there, then it is the refactor version; if not, it is the release.
NON_RELEASE_F=-DNON_RELEASE

###################
###################
## LIBRARY FLAGS ##
###################
###################

# LIBRARY FLAGS
MATH_L=-lm
GPROF_L=-lgprof
GTEST_L=-lgtest

# Legacy libaries
LEGACY_L=$(MATH_L)
REFACTOR_L=
RELEASE_L=

# Build script

###########
###########
## PATHS ##
###########
###########

ONESAMP_P=.

# Contains all legacy files
LEGACY_P=$(ONESAMP_P)/legacy

REFACTOR_P=$(ONESAMP_P)/refactor

REFACTOR_ARGUMENTS_P=$(REFACTOR_P)/arguments
REFACTOR_DATA_P=$(REFACTOR_P)/data
REFACTOR_ENGINE_P=$(REFACTOR_P)/engine
REFACTOR_MACRO_P=$(REFACTOR_P)/macro
REFACTOR_MEMORY_P=$(REFACTOR_P)/memory
REFACTOR_PARSER_P=$(REFACTOR_P)/parser
REFACTOR_RELEASE_P=$(REFACTOR_P)/release
REFACTOR_STATS_P=$(REFACTOR_P)/stats

#############
#############
## TARGETS ##
#############
#############

##########
# LEGACY #
##########

# Legacy main
LEGACY_MAIN_E=$(LEGACY_P)/legacy_onesampr
LEGACY_MAIN_C=$(LEGACY_P)/legacy_onesampr.c
LEGACY_MAIN_O=$(LEGACY_P)/legacy_onesampr.o

# Legacy test
LEGACY_MAIN_TEST_E=$(LEGACY_P)/legacy_onesampr_test
LEGACY_MAIN_TEST_CC=$(LEGACY_P)/legacy_onesampr_test.cc
LEGACY_MAIN_TEST_O=$(LEGACY_P)/legacy_onesampr_test.o

# Legacy all variables
LEGACY_ALL_E=$(LEGACY_MAIN_E) $(LEGACY_MAIN_TEST_E)
LEGACY_ALL_C=$(LEGACY_MAIN_C)
LEGACY_ALL_CC=$(LEGACY_MAIN_TEST_CC)
LEGACY_ALL_O=$(LEGACY_MAIN_O) $(LEGACY_MAIN_TEST_O)

############
# REFACTOR #
############

# Refactor flags

# Refactor libraries

# Refactor main
REFACTOR_MAIN_E=$(REFACTOR_RELEASE_P)/refactor_main
REFACTOR_MAIN_C=$(REFACTOR_ENGINE_P)/refactor_main.c
REFACTOR_MAIN_O=$(REFACTOR_ENGINE_P)/refactor_main.o
REFACTOR_COAL_C=$(REFACTOR_ENGINE_P)/refactor_coalescent_simulator.c
REFACTOR_COAL_E=$(REFACTOR_RELEASE_P)/refactor_coalescent_simulator
REFACTOR_COAL_O=$(REFACTOR_ENGINE_P)/refactor_coalescent_simulator.o

# Refactor engine
REFACTOR_ENGINE_C=$(REFACTOR_ENGINE_P)/refactor_engine.c
REFACTOR_ENGINE_H=$(REFACTOR_ENGINE_P)/refactor_engine.h
REFACTOR_ENGINE_O=$(REFACTOR_ENGINE_P)/refactor_engine.o

# Refactor engine test
REFACTOR_ENGINE_TEST_E=$(REFACTOR_ENGINE_P)/refactor_engine_test
REFACTOR_ENGINE_TEST_CC=$(REFACTOR_ENGINE_P)/refactor_engine_test.cc
REFACTOR_ENGINE_TEST_O=$(REFACTOR_ENGINE_P)/refactor_engine_test.o

# Refactor macro test
REFACTOR_MACRO_H=$(REFACTOR_MACRO_P)/refactor_macro.h
REFACTOR_MACRO_C=$(REFACTOR_MACRO_P)/refactor_macro.c
REFACTOR_MACRO_O=$(REFACTOR_MACRO_P)/refactor_macro.o
REFACTOR_MACRO_TEST_E=$(REFACTOR_MACRO_P)/refactor_macro_test
REFACTOR_MACRO_TEST_CC=$(REFACTOR_MACRO_P)/refactor_macro_test.cc
REFACTOR_MACRO_TEST_O=$(REFACTOR_MACRO_P)/refactor_macro_test.o

# Refactor arguments
REFACTOR_ARGUMENTS_H=$(REFACTOR_ARGUMENTS_P)/refactor_arguments.h
REFACTOR_ARGUMENTS_C=$(REFACTOR_ARGUMENTS_P)/refactor_arguments.c
REFACTOR_ARGUMENTS_O=$(REFACTOR_ARGUMENTS_P)/refactor_arguments.o

# Refactor arguments test
REFACTOR_ARGUMENTS_TEST_E=$(REFACTOR_ARGUMENTS_P)/refactor_arguments_test
REFACTOR_ARGUMENTS_TEST_CC=$(REFACTOR_ARGUMENTS_P)/refactor_arguments_test.cc
REFACTOR_ARGUMENTS_TEST_O=$(REFACTOR_ARGUMENTS_P)/refactor_arguments_test.o

# Refactor parser
REFACTOR_PARSER_H=$(REFACTOR_PARSER_P)/refactor_parser.h
REFACTOR_PARSER_C=$(REFACTOR_PARSER_P)/refactor_parser.c
REFACTOR_PARSER_O=$(REFACTOR_PARSER_P)/refactor_parser.o

# Refactor parser test
REFACTOR_PARSER_TEST_E=$(REFACTOR_PARSER_P)/refactor_parser_test
REFACTOR_PARSER_TEST_CC=$(REFACTOR_PARSER_P)/refactor_parser_test.cc
REFACTOR_PARSER_TEST_O=$(REFACTOR_PARSER_P)/refactor_parser_test.o

# Refactor memory
REFACTOR_MEMORY_C=$(REFACTOR_MEMORY_P)/refactor_memory.c
REFACTOR_MEMORY_H=$(REFACTOR_MEMORY_P)/refactor_memory.h
REFACTOR_MEMORY_O=$(REFACTOR_MEMORY_P)/refactor_memory.o

# Refactor memory test
REFACTOR_MEMORY_TEST_E=$(REFACTOR_MEMORY_P)/refactor_memory_test
REFACTOR_MEMORY_TEST_CC=$(REFACTOR_MEMORY_P)/refactor_memory_test.cc
REFACTOR_MEMORY_TEST_O=$(REFACTOR_MEMORY_P)/refactor_memory_test.o

# Refactor stats
REFACTOR_STATS_C=$(REFACTOR_STATS_P)/refactor_stats.c
REFACTOR_STATS_H=$(REFACTOR_STATS_P)/refactor_stats.h
REFACTOR_STATS_O=$(REFACTOR_STATS_P)/refactor_stats.o

# Refactor stats test
REFACTOR_STATS_TEST_E=$(REFACTOR_STATS_P)/refactor_stats_test
REFACTOR_STATS_TEST_CC=$(REFACTOR_STATS_P)/refactor_stats_test.cc
REFACTOR_STATS_TEST_O=$(REFACTOR_STATS_P)/refactor_stats_test.o

# Refactor tests
REFACTOR_ALL_TESTS_E=$(REFACTOR_RELEASE_P)/refactor_all_test
REFACTOR_TESTS_MAIN_O=$(REFACTOR_ENGINE_P)/refactor_tests_main.o
REFACTOR_TESTS_MAIN_CC=$(REFACTOR_ENGINE_P)/refactor_tests_main.cc

# Refactor all variables
REFACTOR_ALL_E=$(REFACTOR_MAIN_E) $(REFACTOR_COAL_E) $(REFACTOR_ENGINE_TEST_E) $(REFACTOR_MACRO_TEST_E) $(REFACTOR_ARGUMENTS_TEST_E) $(REFACTOR_PARSER_TEST_E) $(REFACTOR_MEMORY_TEST_E) $(REFACTOR_STATS_TEST_E) $(REFACTOR_ALL_TESTS_E)
REFACTOR_ALL_C=$(REFACTOR_MAIN_C) $(REFACTOR_ENGINE_C) $(REFACTOR_ARGUMENTS_C) $(REFACTOR_PARSER_C) $(REFACTOR_MEMORY_C) $(REFACTOR_MACRO_C) $(REFACTOR_STATS_C)
REFACTOR_ALL_CC=$(REFACTOR_ENGINE_TEST_CC) $(REFACTOR_MACRO_TEST_CC) $(REFACTOR_ARGUMENTS_TEST_CC) $(REFACTOR_PARSER_TEST_CC) $(REFACTOR_MEMORY_TEST_CC) $(REFACTOR_STATS_TEST_CC)
REFACTOR_ALL_O=$(REFACTOR_MAIN_O) $(REFACTOR_ENGINE_O) $(REFACTOR_ENGINE_TEST_O) $(REFACTOR_MACRO_O) $(REFACTOR_MACRO_TEST_O) $(REFACTOR_ARGUMENTS_O) $(REFACTOR_ARGUMENTS_TEST_O) $(REFACTOR_PARSER_O) $(REFACTOR_PARSER_TEST_O) $(REFACTOR_MEMORY_O) $(REFACTOR_MEMORY_TEST_O) $(REFACTOR_STATS_O) $(REFACTOR_STATS_TEST_O) $(REFACTOR_MAIN_O)
REFACTOR_ALL_H=$(REFACTOR_ENGINE_H) $(REFACTOR_ARGUMENTS_H) $(REFACTOR_PARSER_H) $(REFACTOR_MEMORY_H) $(REFACTOR_MACRO_H) $(REFACTOR_STATS_H)
REFACTOR_ALL_TESTS_O=$(REFACTOR_ENGINE_TEST_O) $(REFACTOR_MACRO_TEST_O) $(REFACTOR_ARGUMENTS_TEST_O) $(REFACTOR_PARSER_TEST_O) $(REFACTOR_MEMORY_TEST_O) $(REFACTOR_STATS_TEST_O) $(REFACTOR_TESTS_MAIN_O)
REFACTOR_ALL_TESTS_CC=$(REFACTOR_ENGINE_TEST_CC) $(REFACTOR_MACRO_TEST_CC) $(REFACTOR_ARGUMENTS_TEST_CC) $(REFACTOR_PARSER_TEST_CC) $(REFACTOR_MEMORY_TEST_CC) $(REFACTOR_STATS_TEST_CC) $(REFACTOR_TESTS_MAIN_CC)

#############
#############
## CLEANUP ##
#############
#############
ALL_ALL_O=$(LEGACY_ALL_O) $(REFACTOR_ALL_O) $(REFACTOR_ALL_TESTS_O)
ALL_ALL_E=$(LEGACY_ALL_E) $(REFACTOR_ALL_E)
ALL_STATIC_OUTPUTS=$(LEGACY_P)/output $(LEGACY_P)/output2 $(REFACTOR_P)/outputfilename $(REFACTOR_RELEASE_P)/singleFileSourceONeSAMP.c

#############
#############
## TARGETS ##
#############
#############

#############
# ALL BUILD #
#############

# ALL TARGET
#all: $(ALL_ALL_E)

all: $(REFACTOR_ALL_E)

################
# LEGACY BUILD #
################

#### Main

# LEGACY EXECUTABLES

$(LEGACY_MAIN_E): $(LEGACY_ALL_O)
	$(C_S) $(LEGACY_F) $(LEGACY_MAIN_O) $(OUTPUT_P_F) $(LEGACY_MAIN_E) $(LEGACY_L)

# LEGACY OBJECTS

$(LEGACY_MAIN_O): $(LEGACY_MAIN_C)
	$(C_S) $(LEGACY_MAIN_C) $(OUTPUT_O_F) $(OUTPUT_P_F) $(LEGACY_MAIN_O)

#### Main tests

# LEGACY TEST EXECUTABLES

$(LEGACY_MAIN_TEST_E): $(LEGACY_ALL_O)
	$(CC_S) $(LEGACY_F) $(LEGACY_MAIN_TEST_O) $(OUTPUT_P_F) $(LEGACY_MAIN_TEST_E) $(LEGACY_L) $(GTEST_L)

# LEGACY TEST OBJECTS

$(LEGACY_MAIN_TEST_O): $(LEGACY_MAIN_TEST_CC)
	$(CC_S) $(LEGACY_MAIN_TEST_CC) $(OUTPUT_O_F) $(OUTPUT_P_F) $(LEGACY_MAIN_TEST_O)

##################
# REFACTOR BUILD #
##################

#### Main

# MAIN EXECUTABLES

$(REFACTOR_MAIN_E): $(REFACTOR_ALL_O) $(REFACTOR_ALL_H)
	$(C_S) $(LEGACY_F) $(REFACTOR_MAIN_O) $(REFACTOR_ENGINE_O) $(REFACTOR_ARGUMENTS_O) $(REFACTOR_PARSER_O) $(REFACTOR_MEMORY_O) $(REFACTOR_MACRO_O) $(REFACTOR_STATS_O) $(OUTPUT_P_F) $(REFACTOR_MAIN_E) $(REFACTOR_L) $(MATH_L)

$(REFACTOR_COAL_E): $(REFACTOR_COAL_O) $(REFACTOR_ALL_H)
	$(C_S) $(LEGACY_F) $(REFACTOR_COAL_O) $(OUTPUT_P_F) $(REFACTOR_COAL_E) $(REFACTOR_L) $(MATH_L)

# MAIN OBJECTS

$(REFACTOR_MAIN_O): $(REFACTOR_MAIN_C)
	$(C_S) $(OUTPUT_O_F) $(REFACTOR_MAIN_C) $(OUTPUT_P_F) $(REFACTOR_MAIN_O)

$(REFACTOR_COAL_O): $(REFACTOR_COAL_C)
	$(C_S) $(OUTPUT_O_F) $(REFACTOR_COAL_C) $(OUTPUT_P_F) $(REFACTOR_COAL_O)

#### Tests

$(REFACTOR_TESTS_MAIN_O): $(REFACTOR_TESTS_MAIN_CC)
	$(CC_S) $(OUTPUT_O_F) $(REFACTOR_TESTS_MAIN_CC) $(OUTPUT_P_F) $(REFACTOR_TESTS_MAIN_O)

$(REFACTOR_ALL_TESTS_E): $(REFACTOR_ALL_TESTS_O) $(REFACTOR_ALL_O) $(REFACTOR_ALL_H)
	$(CC_S) $(LEGACY_F) $(REFACTOR_ALL_TESTS_O) $(REFACTOR_ENGINE_O) $(REFACTOR_ARGUMENTS_O) $(REFACTOR_PARSER_O) $(REFACTOR_MEMORY_O) $(REFACTOR_MACRO_O) $(REFACTOR_STATS_O) $(OUTPUT_P_F) $(REFACTOR_ALL_TESTS_E) $(REFACTOR_L) $(GTEST_L)

#### Engine

# ENGINE OBJECTS

$(REFACTOR_ENGINE_O): $(REFACTOR_ENGINE_C) $(REFACTOR_ALL_H)
	$(C_S) $(OUTPUT_O_F) $(REFACTOR_ENGINE_C) $(OUTPUT_P_F) $(REFACTOR_ENGINE_O)

#### Engine tests

# ENGINE TEST EXECUTABLES

$(REFACTOR_ENGINE_TEST_E): $(REFACTOR_ALL_O) $(REFACTOR_ALL_H) $(REFACTOR_TESTS_MAIN_O)
	$(CC_S) $(REFACTOR_F) $(REFACTOR_TESTS_MAIN_O) $(REFACTOR_ENGINE_TEST_O) $(REFACTOR_ENGINE_O) $(REFACTOR_MACRO_O) $(REFACTOR_MEMORY_O) $(REFACTOR_STATS_O) $(REFACTOR_PARSE_O) $(REFACTOR_ARGUMENTS_O) $(REFACTOR_PARSER_O) $(OUTPUT_P_F) $(REFACTOR_ENGINE_TEST_E) $(REFACTOR_L) $(GTEST_L)

# ENGINE TEST OBJECTS

$(REFACTOR_ENGINE_TEST_O): $(REFACTOR_ENGINE_TEST_CC)
	$(CC_S) $(OUTPUT_O_F) $(REFACTOR_ENGINE_TEST_CC) $(OUTPUT_P_F) $(REFACTOR_ENGINE_TEST_O)

#### Macro

# ENGINE OBJECTS

$(REFACTOR_MACRO_O): $(REFACTOR_MACRO_C) $(REFACTOR_ALL_H)
	$(C_S) $(OUTPUT_O_F) $(REFACTOR_MACRO_C) $(OUTPUT_P_F) $(REFACTOR_MACRO_O)

#### Macro tests

# MACRO TEST EXECUTABLES

$(REFACTOR_MACRO_TEST_E): $(REFACTOR_ALL_O) $(REFACTOR_ALL_H) $(REFACTOR_TESTS_MAIN_O) $(REFACTOR_ARGUMENTS_O)
	$(CC_S) $(MACRO_F) $(REFACTOR_MEMORY_O) $(REFACTOR_ARGUMENTS_O) $(REFACTOR_MACRO_TEST_O) $(REFACTOR_MACRO_O) $(REFACTOR_TESTS_MAIN_O) $(OUTPUT_P_F) $(REFACTOR_MACRO_TEST_E) $(REFACTOR_L) $(GTEST_L)

# MACRO TEST OBJECTS

$(REFACTOR_MACRO_TEST_O): $(REFACTOR_MACRO_TEST_CC)
	$(CC_S) $(OUTPUT_O_F) $(REFACTOR_MACRO_TEST_CC) $(OUTPUT_P_F) $(REFACTOR_MACRO_TEST_O)

#### Arguments

# ARGUMENTS OBJECTS

$(REFACTOR_ARGUMENTS_O): $(REFACTOR_ARGUMENTS_C) $(REFACTOR_ALL_H)
	$(C_S) $(OUTPUT_O_F) $(REFACTOR_ARGUMENTS_C) $(OUTPUT_P_F) $(REFACTOR_ARGUMENTS_O)

#### Arguments tests

# ARGUMENTS TEST EXECUTABLES

$(REFACTOR_ARGUMENTS_TEST_E): $(REFACTOR_ALL_O) $(REFACTOR_ALL_H) $(REFACTOR_TESTS_MAIN_O)
	$(CC_S) $(REFACTOR_F) $(REFACTOR_ARGUMENTS_O) $(REFACTOR_TESTS_MAIN_O) $(REFACTOR_ARGUMENTS_TEST_O) $(REFACTOR_MEMORY_O) $(REFACTOR_MACRO_O) $(OUTPUT_P_F) $(REFACTOR_ARGUMENTS_TEST_E) $(REFACTOR_L) $(GTEST_L)

# ARGUMENTS TEST OBJECTS

$(REFACTOR_ARGUMENTS_TEST_O): $(REFACTOR_ARGUMENTS_TEST_CC)
	$(CC_S) $(OUTPUT_O_F) $(REFACTOR_ARGUMENTS_TEST_CC) $(OUTPUT_P_F) $(REFACTOR_ARGUMENTS_TEST_O)

#### Parser

# PARSER OBJECTS

$(REFACTOR_PARSER_O): $(REFACTOR_PARSER_C) $(REFACTOR_ALL_H)
	$(C_S) $(OUTPUT_O_F) $(REFACTOR_PARSER_C) $(OUTPUT_P_F) $(REFACTOR_PARSER_O)

#### Parser tests

# PARSER TEST EXECUTABLES

$(REFACTOR_PARSER_TEST_E): $(REFACTOR_ALL_O) $(REFACTOR_ALL_H) $(REFACTOR_TESTS_MAIN_O)
	$(CC_S) $(REFACTOR_F) $(REFACTOR_TESTS_MAIN_O) $(REFACTOR_PARSER_O) $(REFACTOR_ARGUMENTS_O) $(REFACTOR_PARSER_TEST_O) $(REFACTOR_MEMORY_O) $(REFACTOR_MACRO_O) $(OUTPUT_P_F) $(REFACTOR_PARSER_TEST_E) $(REFACTOR_L) $(GTEST_L)

# PARSER TEST OBJECTS

$(REFACTOR_PARSER_TEST_O): $(REFACTOR_PARSER_TEST_CC)
	$(CC_S) $(OUTPUT_O_F) $(REFACTOR_PARSER_TEST_CC) $(OUTPUT_P_F) $(REFACTOR_PARSER_TEST_O)

#### Memory

# MEMORY OBJECTS

$(REFACTOR_MEMORY_O): $(REFACTOR_MEMORY_C) $(REFACTOR_ALL_H)
	$(C_S) $(OUTPUT_O_F) $(REFACTOR_MEMORY_C) $(OUTPUT_P_F) $(REFACTOR_MEMORY_O)

#### Memory tests

# MEMORY TEST EXECUTABLES

$(REFACTOR_MEMORY_TEST_E): $(REFACTOR_ALL_O) $(REFACTOR_ALL_H) $(REFACTOR_TESTS_MAIN_O)
	$(CC_S) $(REFACTOR_F) $(REFACTOR_TESTS_MAIN_O) $(REFACTOR_MEMORY_TEST_O) $(REFACTOR_MEMORY_O) $(REFACTOR_ARGUMENTS_O) $(REFACTOR_MACRO_O) $(OUTPUT_P_F) $(REFACTOR_MEMORY_TEST_E) $(REFACTOR_L) $(GTEST_L)

# MEMORY TEST OBJECTS

$(REFACTOR_MEMORY_TEST_O): $(REFACTOR_MEMORY_TEST_CC)
	$(CC_S) $(OUTPUT_O_F) $(REFACTOR_MEMORY_TEST_CC) $(OUTPUT_P_F) $(REFACTOR_MEMORY_TEST_O)

#### Stats

# STATS OBJECTS

$(REFACTOR_STATS_O): $(REFACTOR_STATS_C) $(REFACTOR_ALL_H)
	$(C_S) $(OUTPUT_O_F) $(REFACTOR_STATS_C) $(OUTPUT_P_F) $(REFACTOR_STATS_O)

#### Stats tests

# STATS TEST EXECUTABLES

$(REFACTOR_STATS_TEST_E): $(REFACTOR_ALL_O) $(REFACTOR_ALL_H) $(REFACTOR_TESTS_MAIN_O)
	$(CC_S) $(REFACTOR_F) $(REFACTOR_TESTS_MAIN_O) $(REFACTOR_STATS_TEST_O) $(REFACTOR_STATS_O) $(REFACTOR_ARGUMENTS_O) $(REFACTOR_MACRO_O) $(REFACTOR_MEMORY_O) $(OUTPUT_P_F) $(REFACTOR_STATS_TEST_E) $(REFACTOR_L) $(GTEST_L)

# STATS TEST OBJECTS

$(REFACTOR_STATS_TEST_O): $(REFACTOR_STATS_TEST_CC)
	$(CC_S) $(OUTPUT_O_F) $(REFACTOR_STATS_TEST_CC) $(OUTPUT_P_F) $(REFACTOR_STATS_TEST_O)

#### Data is an output folder, so does not need anything compiled at this time.

#### Single source file

singleSource: $(REFACTOR_ALL_H) $(REFACTOR_ALL_C)
	cat $(REFACTOR_MACRO_H) | grep -v "#include \"" > $(REFACTOR_RELEASE_P)/singleFileSourceONeSAMP.c
	cat $(REFACTOR_ARGUMENTS_H) | grep -v "#include \"" >> $(REFACTOR_RELEASE_P)/singleFileSourceONeSAMP.c
	cat $(REFACTOR_ENGINE_H) | grep -v "#include \"" >> $(REFACTOR_RELEASE_P)/singleFileSourceONeSAMP.c
	cat $(REFACTOR_MEMORY_H) | grep -v "#include \"" >> $(REFACTOR_RELEASE_P)/singleFileSourceONeSAMP.c
	cat $(REFACTOR_PARSER_H) | grep -v "#include \"" >> $(REFACTOR_RELEASE_P)/singleFileSourceONeSAMP.c
	cat $(REFACTOR_STATS_H) | grep -v "#include \"" >> $(REFACTOR_RELEASE_P)/singleFileSourceONeSAMP.c
	cat $(REFACTOR_MACRO_C) | grep -v "#include \"" >> $(REFACTOR_RELEASE_P)/singleFileSourceONeSAMP.c
	cat $(REFACTOR_ARGUMENTS_C) | grep -v "#include \"" >> $(REFACTOR_RELEASE_P)/singleFileSourceONeSAMP.c
	cat $(REFACTOR_ENGINE_C) | grep -v "#include \"" >> $(REFACTOR_RELEASE_P)/singleFileSourceONeSAMP.c
	cat $(REFACTOR_MEMORY_C) | grep -v "#include \"" >> $(REFACTOR_RELEASE_P)/singleFileSourceONeSAMP.c
	cat $(REFACTOR_PARSER_C) | grep -v "#include \"" >> $(REFACTOR_RELEASE_P)/singleFileSourceONeSAMP.c
	cat $(REFACTOR_STATS_C) | grep -v "#include \"" >> $(REFACTOR_RELEASE_P)/singleFileSourceONeSAMP.c
	cat $(REFACTOR_MAIN_C) | grep -v "#include \"" >> $(REFACTOR_RELEASE_P)/singleFileSourceONeSAMP.c

clean:
	$(DELETE_S) *~ $(ALL_ALL_O) $(ALL_ALL_E) $(ALL_STATIC_OUTPUTS)
